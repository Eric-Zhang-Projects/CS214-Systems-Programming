#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <linux/limits.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include "Asst2Sorter.c"
#include "stack.c"
#define MAX_THREADS 50
//updated

char *global_outdir;
char *global_searchdir;
char *global_headerName;
int global_sortType;
int count_threads;
pthread_t *TIDs;
stackOf *StackOfSortedFiles;
pid_t root;
pthread_t rootTID;

typedef struct Traverse{
  char *dir_path;
  const char *output_dir;
  int count;
  DIR *dir;
  pthread_t *TempThread;
}TraverseArgs;

typedef struct Sort{
  char *path;
  char *dir_name;
  const char *out_dir;
  char *dir_path;
  int count;
 // FILE *csv;
}SorterArgs;


int dir_initialize( char* col, const char *Path, const char *output_path);
void *PathTraverse(void *args);
void *FileSorter(void *args);
/*
TraverseArgs * MakeT_args(char *dir_path, const char *output_dir,int count,DIR *dir,pthread_t *TempThread);
SorterArgs * MakeS_args(char *path, char *dir_name, const char *out_dir, char *dir_path, int count);
*/
TraverseArgs * MakeT_args(char *dir_path, const char *output_dir,int count,DIR *dir,pthread_t *TempThread)
{
  TraverseArgs *DirArgs = (TraverseArgs *)malloc(sizeof(TraverseArgs));
  
  DirArgs  -> dir_path = dir_path;
  DirArgs  -> output_dir = output_dir;
  DirArgs  -> count = count;
  DirArgs  -> dir = dir;
  DirArgs  -> TempThread = TempThread;
  
  return DirArgs;
}// end of TraverseArgs function

SorterArgs * MakeS_args(char *path, char *dir_name, const char *out_dir, char *dir_path, int count)
{
 SorterArgs *SortArgs = (SorterArgs *)malloc(sizeof(SorterArgs));
 
 SortArgs -> path = path;
 SortArgs -> dir_name = dir_name;
 SortArgs -> out_dir = out_dir;
 SortArgs -> dir_path = dir_path;
 SortArgs -> count = count;
 
 return SortArgs;
}



int main(int argc, char* argv[]) {
    // creates inital pipe to children 
    // created here because children will never get to this method
    
root = getpid();
rootTID = pthread_self();
printf("initial PID: %d \n", root);

int thisdir =0;
char *outdir;
char *searchdir;
searchdir = (char *)malloc(sizeof(char) * 3);
char * headerName;
outdir = (char *)malloc(sizeof(char) * 3);
int dyes = 0;
int oyes =0;
int cyes=0;
int i;
//printf("\n");
if(argc!=3&&argc!=5&&argc!=7)
{
printf("FATAL ERROR: INCORRECT INPUT FORMAT\n");
exit(1);
}
for (i=1; i<argc;i+=2)
{
if (strcmp(argv[i],"-c") != 0 && strcmp(argv[i],"-d")!=0 &&
strcmp(argv[i],"-o")!=0)
{
printf("FATAL ERROR: INCORRECT INPUT FORMAT\n");
exit(1);
}
else if (strcmp(argv[i],"-c")==0)
{
  headerName = malloc(sizeof(argv[i+1])*5);
  global_headerName = malloc(sizeof(argv[i+1])*5);
  strcpy(global_headerName,argv[i+1]);
  strcpy(headerName, argv[i+1]);
  cyes++;
}
else if (strcmp(argv[i],"-d")==0)
{
global_searchdir = malloc(sizeof(argv[i+1])*5);
 strcpy(global_searchdir,argv[i+1]);
 dyes++;
}
else if (strcmp(argv[i],"-o")==0)
{
global_outdir = malloc(sizeof(argv[i+1])*5);
  strcpy(global_outdir,argv[i+1]) ;
  oyes++;
}
if (cyes!=1 ||dyes>1||oyes>1)
{
printf("FATAL ERROR: Duplicate Flags, Fatal Error\n");
exit(1);
}
}//end of for loop
if (oyes!=1 && dyes!=1)
{
global_searchdir = ".";
global_outdir = ".";
}
else if (oyes!=1)
{
global_outdir = ".";
}
else if (dyes!=1)
{
global_searchdir = ".";
}
if (strcmp (headerName, "num_critic_for_reviews") ==0 || //check if int
    strcmp (headerName, "duration") ==0 ||
    strcmp (headerName, "director_facebook_likes") ==0 ||
    strcmp (headerName, "actor_3_facebook_likes") ==0 ||
    strcmp (headerName, "actor_1_facebook_likes") ==0 ||
    strcmp (headerName, "gross") ==0 ||
    strcmp (headerName, "num_voted_users") ==0 ||
    strcmp (headerName, "cast_total_facebook_likes") ==0 ||
    strcmp (headerName, "facenumber_in_poster") ==0 ||
    strcmp (headerName, "num_user_for_reviews") ==0 ||
    strcmp (headerName, "budget") ==0 ||
    strcmp (headerName, "title_year") ==0 ||
    strcmp (headerName, "actor_2_facebook_likes") ==0 ||
    strcmp (headerName, "imdb_score") ==0 ||
    strcmp (headerName, "aspect_ratio") ==0 ||
    strcmp (headerName, "movie_facebook_likes") ==0)
{ 
if (strcmp (headerName, "imdb_score") ==0 ||
    strcmp (headerName, "aspect_ratio") ==0)
    {
       global_sortType = 1; //float
}
else{
   global_sortType = 2;//int
 } 
}
else if ((strcmp (headerName, "num_critic_for_reviews") !=0 && //check if string
    strcmp (headerName, "duration") !=0 &&
    strcmp (headerName, "director_facebook_likes") !=0 &&
    strcmp (headerName, "actor_3_facebook_likes") !=0 &&
    strcmp (headerName, "actor_1_facebook_likes") !=0 &&
    strcmp (headerName, "gross") !=0 &&
    strcmp (headerName, "num_voted_users") !=0 &&
    strcmp (headerName, "cast_total_facebook_likes") !=0 &&
    strcmp (headerName, "facenumber_in_poster") !=0 &&
    strcmp (headerName, "num_user_for_reviews") !=0 &&
    strcmp (headerName, "budget") !=0 &&
    strcmp (headerName, "title_year") !=0 &&
    strcmp (headerName, "actor_2_facebook_likes") !=0 &&
    strcmp (headerName, "imdb_score") !=0 &&
    strcmp (headerName, "aspect_ratio") !=0 &&
    strcmp (headerName, "movie_facebook_likes") !=0))
    {
      global_sortType = 3; //char
    }

//printf("search dir %s out dir: %s\n", searchdir, outdir);
DIR* dirCh = opendir(global_outdir);
if (dirCh)
{
    /* Directory exists. */
    closedir(dirCh);
}
else if (ENOENT == errno)
{
    printf("FATAL ERROR: Output Directory Does Not Exist\n");
    exit(1);
}
StackOfSortedFiles = stack_create(100);
dir_initialize(global_headerName, global_searchdir, global_outdir);

    return 0;
}//end of main


int dir_initialize( char* col, const char *Path, const char *output_path)
{//int travdir
  char *path = (char *)malloc(1024);
  strcpy(path,Path);
   DIR *dir;
    if (!(dir = opendir(path)))
   {
     printf("directory not found in dir initialize\n");
     return 1;
   }
   
   //dir = opendir(Path);
   count_threads = 0;
   pthread_t *TempThrd = (pthread_t *)(malloc(sizeof(pthread_t)* MAX_THREADS));
   TIDs = (pthread_t*)(malloc(sizeof(pthread_t)*MAX_THREADS));
   PathTraverse(MakeT_args(path,output_path,count_threads,dir,TempThrd));
   free(path);
  return 0;
}//end o dir_initialize

void *PathTraverse(void *args)
{//gothroughpath
  TraverseArgs *T_args = args;
  char *dp = T_args -> dir_path;
  char *out_dir = global_outdir;
  pthread_t *TempThrd = T_args -> TempThread;
  DIR *directory = T_args -> dir;
  struct dirent *entry;
  entry = readdir(directory);
  char path[1024];
  TIDs[count_threads] = pthread_self();
  count_threads++;
  
  /*if (!(directory = opendir(dp)))
  {
      fprintf(stderr, "directory not found in listdir\n");
       exit(1);
  }*/
  while ((entry = readdir(directory)) != NULL) 
  {
    if (entry->d_type == DT_DIR) 
    {
      if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0){
        continue;}
      
      snprintf(path,sizeof(path),"%s/%s", dp, entry ->d_name);
      
      DIR* newDir = opendir(path);
      
      pthread_t thread;
      pthread_create(&thread,NULL,PathTraverse,MakeT_args(dp,out_dir,0,newDir,TempThrd));
      T_args ->TempThread[T_args->count ++] = thread;
    }// end of if statement for case of directory found
    else
    {
      //FILE * csv = NULL;
      snprintf(path,sizeof(path),"%s/%s",dp,entry ->d_name);
      
      pthread_t thread;
      pthread_create(&thread,NULL,FileSorter,MakeS_args(path,entry->d_name,out_dir,dp,T_args->count));
      T_args ->TempThread[T_args->count++] = thread;
    }// end of else if statement in case of file found 
      
  }// end of while loop that traverses directory
  
  int i;
  int totalThreads = T_args -> count;
  
  for(i = 0; i < T_args -> count; i++)
  {
    pthread_join(T_args -> TempThread[i],NULL);
  
  }
  
  free(T_args -> dir);
 
  if(getpid() == root && pthread_self() == rootTID)
  {

    printf("Initial pid is : %d\n", root);
    printf("TIDs are: ");
    for(i = 0; i < count_threads; i++)
    {
      printf("%u, ", TIDs[i]);
    }
    printf("\nTotal number of TIDs are %d\n",count_threads);
    
    rowData  * mergedHead;
    rowData mergedFinal;
while(is_Empty(StackOfSortedFiles)!=1) {
  
			//printf("The stack has %d elements in it.\n", StackOfSortedFiles->count);
			if(StackOfSortedFiles->count > 1) {
				rowData head1 = pop(StackOfSortedFiles);
				rowData head2 = pop(StackOfSortedFiles);
        printf("MADE IT\n");
	//			if(head1 != NULL && head2!=NULL) {
        if (global_sortType==1)
        {
					mergedHead = SortedMergeFloat(&head1,&head2);
					push(StackOfSortedFiles, *mergedHead);
     }
     else if (global_sortType ==2)
     {
     mergedHead =SortedMergeInt(&head1,&head2);
					push(StackOfSortedFiles, *mergedHead);
     }
     else if (global_sortType ==3)
     {
     mergedHead =SortedMergeChar(&head1,&head2);
					push(StackOfSortedFiles, *mergedHead);
     }

			//	} 
        else {
				}
			} else if (StackOfSortedFiles->count == 1) {
      	mergedFinal = pop(StackOfSortedFiles);
       
        //----- area of concern
			}
		}//end of while loop traversing stack
char outdirA[500];
FILE * csvOut;
strcpy(outdirA, global_outdir);
strcat(outdirA,"/AllFiles-sorted-<");
strcat(outdirA, global_headerName);
strcat(outdirA, ">.csv");
printf("OUTDIR: %s\n", outdirA);

printing(mergedFinal, outdirA, global_headerName);


    free(args);
    exit(0);
    
  }// end of if statement to print initial pid, TIDs and num of threads
  
  pthread_exit(NULL);
}// end of PathTraverse fucntion

void *FileSorter(void *args)
{//processfiletosort
//char * path;
char path[1024];
  SorterArgs *S_args = args;
  TIDs[count_threads] = pthread_self();
  count_threads++;
  char *FileName = S_args->dir_name;
  printf("FILE NAME %s\n", FileName);
  int fileNameLen = strlen(FileName);
  if (fileNameLen > 4 && strcmp(FileName + fileNameLen - 4, ".csv") == 0 &&strstr(FileName,"-sorted-") == NULL){       
 // printf("p2:%s,%s\n", S_args->path, FileName);   
  //snprintf(path, sizeof(path), "%s/%s", S_args->path, FileName);  //call is valid csv
  snprintf(path, sizeof(path), "%s/%s", global_searchdir, FileName);
  int valid=0;;
  printf("Path:%s\n", path);
  valid = checkvalid(path);              
  if (valid ==0)
  {
 
  fprintf(stderr, "ERROR: Invalid CSV Format\n");
  }
  else{ //call csv sorter
  rowData * head;
  head = csvSorter(path, global_outdir, S_args->dir_name, global_headerName);
  
  push(StackOfSortedFiles, *head);
  
  }
  }

}// end of sorter function




